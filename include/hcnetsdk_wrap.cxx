/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: .\hcnetsdk.i


extern
#ifdef __cplusplus
  "C"
#endif
  void cgo_panic__HKIPcamera_f77b1fde7b65d287(const char*);
static void _swig_gopanic(const char *p) {
  cgo_panic__HKIPcamera_f77b1fde7b65d287(p);
}



#define SWIG_VERSION 0x040301
#define SWIGGO
#define SWIGMODULE HKIPcamera
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


// 必须包含的头文件
#include "HCNetSDK.h"
#include "plaympeg4.h"  // 若涉及解码回调需包含
#include <opencv2/opencv.hpp>  // 若涉及图像处理需包含

// 其他必要的宏定义和全局变量声明
#define USECOLOR 1
extern LONG lUserID;
extern NET_DVR_DEVICEINFO_V30 struDeviceInfo;


#include <string.h>


void DecodeFrameCallback(FRAME_INFO *pFrameInfo, BYTE *pBuf) {
    // 此处添加解码和图像处理的C++代码
    // 参考搜索结果中的yv12toYUV和DecCBFun实现[2,5](@ref)
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_HKIPcamera_f77b1fde7b65d287(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_HKIPcamera_f77b1fde7b65d287(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_PLAYRECT_x_set_HKIPcamera_f77b1fde7b65d287(__PLAYRECT *_swig_go_0, intgo _swig_go_1) {
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  int arg2 ;
  
  arg1 = *(__PLAYRECT **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->x = arg2;
  
}


intgo _wrap_PLAYRECT_x_get_HKIPcamera_f77b1fde7b65d287(__PLAYRECT *_swig_go_0) {
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(__PLAYRECT **)&_swig_go_0; 
  
  result = (int) ((arg1)->x);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PLAYRECT_y_set_HKIPcamera_f77b1fde7b65d287(__PLAYRECT *_swig_go_0, intgo _swig_go_1) {
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  int arg2 ;
  
  arg1 = *(__PLAYRECT **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->y = arg2;
  
}


intgo _wrap_PLAYRECT_y_get_HKIPcamera_f77b1fde7b65d287(__PLAYRECT *_swig_go_0) {
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(__PLAYRECT **)&_swig_go_0; 
  
  result = (int) ((arg1)->y);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PLAYRECT_uWidth_set_HKIPcamera_f77b1fde7b65d287(__PLAYRECT *_swig_go_0, intgo _swig_go_1) {
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  int arg2 ;
  
  arg1 = *(__PLAYRECT **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->uWidth = arg2;
  
}


intgo _wrap_PLAYRECT_uWidth_get_HKIPcamera_f77b1fde7b65d287(__PLAYRECT *_swig_go_0) {
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(__PLAYRECT **)&_swig_go_0; 
  
  result = (int) ((arg1)->uWidth);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PLAYRECT_uHeight_set_HKIPcamera_f77b1fde7b65d287(__PLAYRECT *_swig_go_0, intgo _swig_go_1) {
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  int arg2 ;
  
  arg1 = *(__PLAYRECT **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->uHeight = arg2;
  
}


intgo _wrap_PLAYRECT_uHeight_get_HKIPcamera_f77b1fde7b65d287(__PLAYRECT *_swig_go_0) {
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(__PLAYRECT **)&_swig_go_0; 
  
  result = (int) ((arg1)->uHeight);
  _swig_go_result = result; 
  return _swig_go_result;
}


__PLAYRECT *_wrap_new_PLAYRECT_HKIPcamera_f77b1fde7b65d287() {
  __PLAYRECT *result = 0 ;
  __PLAYRECT *_swig_go_result;
  
  
  result = (__PLAYRECT *)new __PLAYRECT();
  *(__PLAYRECT **)&_swig_go_result = (__PLAYRECT *)result; 
  return _swig_go_result;
}


void _wrap_delete_PLAYRECT_HKIPcamera_f77b1fde7b65d287(__PLAYRECT *_swig_go_0) {
  __PLAYRECT *arg1 = (__PLAYRECT *) 0 ;
  
  arg1 = *(__PLAYRECT **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_NET_SDK_GET_NEXT_STATUS_SUCCESS_HKIPcamera_f77b1fde7b65d287() {
  int result;
  intgo _swig_go_result;
  
  
  result = NET_SDK_GET_NEXT_STATUS_SUCCESS;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_NET_SDK_GET_NETX_STATUS_NEED_WAIT_HKIPcamera_f77b1fde7b65d287() {
  int result;
  intgo _swig_go_result;
  
  
  result = NET_SDK_GET_NETX_STATUS_NEED_WAIT;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_NET_SDK_GET_NEXT_STATUS_FINISH_HKIPcamera_f77b1fde7b65d287() {
  int result;
  intgo _swig_go_result;
  
  
  result = NET_SDK_GET_NEXT_STATUS_FINISH;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_NET_SDK_GET_NEXT_STATUS_FAILED_HKIPcamera_f77b1fde7b65d287() {
  int result;
  intgo _swig_go_result;
  
  
  result = NET_SDK_GET_NEXT_STATUS_FAILED;
  
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_sSerialNumber_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE (*_swig_go_1)[48]) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->sSerialNumber;
    for (ii = 0; ii < (size_t)48; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_DEVICEINFO_V30_sSerialNumber_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0))[48] {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[48];
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->sSerialNumber);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byAlarmInPortNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byAlarmInPortNum = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byAlarmInPortNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byAlarmInPortNum);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byAlarmOutPortNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byAlarmOutPortNum = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byAlarmOutPortNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byAlarmOutPortNum);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byDiskNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byDiskNum = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byDiskNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byDiskNum);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byDVRType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byDVRType = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byDVRType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byDVRType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byChanNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byChanNum = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byChanNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byChanNum);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byStartChan_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byStartChan = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byStartChan_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byStartChan);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byAudioChanNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byAudioChanNum = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byAudioChanNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byAudioChanNum);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byIPChanNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byIPChanNum = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byIPChanNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byIPChanNum);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byZeroChanNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byZeroChanNum = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byZeroChanNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byZeroChanNum);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byMainProto_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byMainProto = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byMainProto_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byMainProto);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_bySubProto_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySubProto = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_bySubProto_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->bySubProto);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_bySupport_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySupport = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_bySupport_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->bySupport);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_bySupport1_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySupport1 = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_bySupport1_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->bySupport1);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_bySupport2_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySupport2 = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_bySupport2_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->bySupport2);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_wDevType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, WORD *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  WORD arg2 ;
  WORD *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  if (arg1) (arg1)->wDevType = arg2;
  
}


WORD *_wrap_NET_DVR_DEVICEINFO_V30_wDevType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  WORD result;
  WORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->wDevType);
  *(WORD **)&_swig_go_result = new WORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_bySupport3_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySupport3 = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_bySupport3_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->bySupport3);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byMultiStreamProto_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byMultiStreamProto = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byMultiStreamProto_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byMultiStreamProto);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byStartDChan_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byStartDChan = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byStartDChan_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byStartDChan);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byStartDTalkChan_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byStartDTalkChan = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byStartDTalkChan_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byStartDTalkChan);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byHighDChanNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byHighDChanNum = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byHighDChanNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byHighDChanNum);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_bySupport4_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySupport4 = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_bySupport4_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->bySupport4);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byLanguageType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byLanguageType = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byLanguageType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byLanguageType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byVoiceInChanNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byVoiceInChanNum = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byVoiceInChanNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byVoiceInChanNum);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byStartVoiceInChanNo_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byStartVoiceInChanNo = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byStartVoiceInChanNo_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byStartVoiceInChanNo);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_bySupport5_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySupport5 = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_bySupport5_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->bySupport5);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_bySupport6_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySupport6 = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_bySupport6_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->bySupport6);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byMirrorChanNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byMirrorChanNum = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byMirrorChanNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byMirrorChanNum);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_wStartMirrorChanNo_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, WORD *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  WORD arg2 ;
  WORD *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  if (arg1) (arg1)->wStartMirrorChanNo = arg2;
  
}


WORD *_wrap_NET_DVR_DEVICEINFO_V30_wStartMirrorChanNo_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  WORD result;
  WORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->wStartMirrorChanNo);
  *(WORD **)&_swig_go_result = new WORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_bySupport7_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySupport7 = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_bySupport7_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->bySupport7);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V30_byRes2_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byRes2 = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V30_byRes2_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  result =  ((arg1)->byRes2);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


tagNET_DVR_DEVICEINFO_V30 *_wrap_new_NET_DVR_DEVICEINFO_V30_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_DEVICEINFO_V30 *result = 0 ;
  tagNET_DVR_DEVICEINFO_V30 *_swig_go_result;
  
  
  result = (tagNET_DVR_DEVICEINFO_V30 *)new tagNET_DVR_DEVICEINFO_V30();
  *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_result = (tagNET_DVR_DEVICEINFO_V30 *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_DEVICEINFO_V30_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V30 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V30 *arg1 = (tagNET_DVR_DEVICEINFO_V30 *) 0 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V30 **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_DEVICEINFO_V40_struDeviceV30_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, tagNET_DVR_DEVICEINFO_V30 *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  NET_DVR_DEVICEINFO_V30 *arg2 = (NET_DVR_DEVICEINFO_V30 *) 0 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  arg2 = *(NET_DVR_DEVICEINFO_V30 **)&_swig_go_1; 
  
  if (arg1) (arg1)->struDeviceV30 = *arg2;
  
}


tagNET_DVR_DEVICEINFO_V30 *_wrap_NET_DVR_DEVICEINFO_V40_struDeviceV30_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  NET_DVR_DEVICEINFO_V30 *result = 0 ;
  tagNET_DVR_DEVICEINFO_V30 *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result = (NET_DVR_DEVICEINFO_V30 *)& ((arg1)->struDeviceV30);
  *(NET_DVR_DEVICEINFO_V30 **)&_swig_go_result = (NET_DVR_DEVICEINFO_V30 *)result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_bySupportLock_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySupportLock = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V40_bySupportLock_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result =  ((arg1)->bySupportLock);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_byRetryLoginTime_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byRetryLoginTime = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V40_byRetryLoginTime_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result =  ((arg1)->byRetryLoginTime);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_byPasswordLevel_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byPasswordLevel = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V40_byPasswordLevel_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result =  ((arg1)->byPasswordLevel);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_byProxyType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byProxyType = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V40_byProxyType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result =  ((arg1)->byProxyType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_dwSurplusLockTime_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwSurplusLockTime = arg2;
  
}


DWORD *_wrap_NET_DVR_DEVICEINFO_V40_dwSurplusLockTime_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result =  ((arg1)->dwSurplusLockTime);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_byCharEncodeType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byCharEncodeType = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V40_byCharEncodeType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result =  ((arg1)->byCharEncodeType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_bySupportDev5_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySupportDev5 = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V40_bySupportDev5_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result =  ((arg1)->bySupportDev5);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_bySupport_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySupport = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V40_bySupport_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result =  ((arg1)->bySupport);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_byLoginMode_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byLoginMode = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V40_byLoginMode_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result =  ((arg1)->byLoginMode);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_dwOEMCode_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwOEMCode = arg2;
  
}


DWORD *_wrap_NET_DVR_DEVICEINFO_V40_dwOEMCode_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result =  ((arg1)->dwOEMCode);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_iResidualValidity_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, intgo _swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  int arg2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->iResidualValidity = arg2;
  
}


intgo _wrap_NET_DVR_DEVICEINFO_V40_iResidualValidity_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result = (int) ((arg1)->iResidualValidity);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_byResidualValidity_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byResidualValidity = arg2;
  
}


BYTE *_wrap_NET_DVR_DEVICEINFO_V40_byResidualValidity_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result =  ((arg1)->byResidualValidity);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_DEVICEINFO_V40_byRes2_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0, BYTE (*_swig_go_1)[243]) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes2;
    for (ii = 0; ii < (size_t)243; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_DEVICEINFO_V40_byRes2_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0))[243] {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[243];
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


tagNET_DVR_DEVICEINFO_V40 *_wrap_new_NET_DVR_DEVICEINFO_V40_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_DEVICEINFO_V40 *result = 0 ;
  tagNET_DVR_DEVICEINFO_V40 *_swig_go_result;
  
  
  result = (tagNET_DVR_DEVICEINFO_V40 *)new tagNET_DVR_DEVICEINFO_V40();
  *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_result = (tagNET_DVR_DEVICEINFO_V40 *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_DEVICEINFO_V40_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_DEVICEINFO_V40 *_swig_go_0) {
  tagNET_DVR_DEVICEINFO_V40 *arg1 = (tagNET_DVR_DEVICEINFO_V40 *) 0 ;
  
  arg1 = *(tagNET_DVR_DEVICEINFO_V40 **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_USER_LOGIN_INFO_sDeviceAddress_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, _gostring_ _swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if(arg2) {
      strncpy((char*)arg1->sDeviceAddress, (const char *)arg2, 129-1);
      arg1->sDeviceAddress[129-1] = 0;
    } else {
      arg1->sDeviceAddress[0] = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_NET_DVR_USER_LOGIN_INFO_sDeviceAddress_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result = (char *)(char *) ((arg1)->sDeviceAddress);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_byUseTransport_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byUseTransport = arg2;
  
}


BYTE *_wrap_NET_DVR_USER_LOGIN_INFO_byUseTransport_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result =  ((arg1)->byUseTransport);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_wPort_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, WORD *_swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  WORD arg2 ;
  WORD *argp2 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  if (arg1) (arg1)->wPort = arg2;
  
}


WORD *_wrap_NET_DVR_USER_LOGIN_INFO_wPort_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  WORD result;
  WORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result =  ((arg1)->wPort);
  *(WORD **)&_swig_go_result = new WORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_sUserName_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, _gostring_ _swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if(arg2) {
      strncpy((char*)arg1->sUserName, (const char *)arg2, 64-1);
      arg1->sUserName[64-1] = 0;
    } else {
      arg1->sUserName[0] = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_NET_DVR_USER_LOGIN_INFO_sUserName_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result = (char *)(char *) ((arg1)->sUserName);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_sPassword_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, _gostring_ _swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if(arg2) {
      strncpy((char*)arg1->sPassword, (const char *)arg2, 64-1);
      arg1->sPassword[64-1] = 0;
    } else {
      arg1->sPassword[0] = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_NET_DVR_USER_LOGIN_INFO_sPassword_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result = (char *)(char *) ((arg1)->sPassword);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_cbLoginResult_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, void* _swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  fLoginResultCallBack arg2 = (fLoginResultCallBack) 0 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  arg2 = *(fLoginResultCallBack *)&_swig_go_1; 
  
  if (arg1) (arg1)->cbLoginResult = arg2;
  
}


void* _wrap_NET_DVR_USER_LOGIN_INFO_cbLoginResult_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  fLoginResultCallBack result;
  void* _swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result = (fLoginResultCallBack) ((arg1)->cbLoginResult);
  *(fLoginResultCallBack *)&_swig_go_result = (fLoginResultCallBack)result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_pUser_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, void *_swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  arg2 = *(void **)&_swig_go_1; 
  
  if (arg1) (arg1)->pUser = arg2;
  
}


void *_wrap_NET_DVR_USER_LOGIN_INFO_pUser_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result = (void *) ((arg1)->pUser);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_bUseAsynLogin_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, BOOL *_swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BOOL arg2 ;
  BOOL *argp2 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  argp2 = (BOOL *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BOOL");
  }
  arg2 = (BOOL)*argp2;
  
  
  if (arg1) (arg1)->bUseAsynLogin = arg2;
  
}


BOOL *_wrap_NET_DVR_USER_LOGIN_INFO_bUseAsynLogin_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result =  ((arg1)->bUseAsynLogin);
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_byProxyType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byProxyType = arg2;
  
}


BYTE *_wrap_NET_DVR_USER_LOGIN_INFO_byProxyType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result =  ((arg1)->byProxyType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_byUseUTCTime_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byUseUTCTime = arg2;
  
}


BYTE *_wrap_NET_DVR_USER_LOGIN_INFO_byUseUTCTime_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result =  ((arg1)->byUseUTCTime);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_byLoginMode_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byLoginMode = arg2;
  
}


BYTE *_wrap_NET_DVR_USER_LOGIN_INFO_byLoginMode_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result =  ((arg1)->byLoginMode);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_byHttps_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byHttps = arg2;
  
}


BYTE *_wrap_NET_DVR_USER_LOGIN_INFO_byHttps_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result =  ((arg1)->byHttps);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_iProxyID_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, LONG *_swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  LONG arg2 ;
  LONG *argp2 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  argp2 = (LONG *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg2 = (LONG)*argp2;
  
  
  if (arg1) (arg1)->iProxyID = arg2;
  
}


LONG *_wrap_NET_DVR_USER_LOGIN_INFO_iProxyID_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  LONG result;
  LONG *_swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result =  ((arg1)->iProxyID);
  *(LONG **)&_swig_go_result = new LONG(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_byVerifyMode_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byVerifyMode = arg2;
  
}


BYTE *_wrap_NET_DVR_USER_LOGIN_INFO_byVerifyMode_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result =  ((arg1)->byVerifyMode);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_USER_LOGIN_INFO_byRes3_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, BYTE (*_swig_go_1)[119]) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes3;
    for (ii = 0; ii < (size_t)119; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_USER_LOGIN_INFO_byRes3_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0))[119] {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[119];
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes3);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


tagNET_DVR_USER_LOGIN_INFO *_wrap_new_NET_DVR_USER_LOGIN_INFO_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_USER_LOGIN_INFO *result = 0 ;
  tagNET_DVR_USER_LOGIN_INFO *_swig_go_result;
  
  
  result = (tagNET_DVR_USER_LOGIN_INFO *)new tagNET_DVR_USER_LOGIN_INFO();
  *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_result = (tagNET_DVR_USER_LOGIN_INFO *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_USER_LOGIN_INFO_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0) {
  tagNET_DVR_USER_LOGIN_INFO *arg1 = (tagNET_DVR_USER_LOGIN_INFO *) 0 ;
  
  arg1 = *(tagNET_DVR_USER_LOGIN_INFO **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_JPEGPARA_wPicSize_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_JPEGPARA *_swig_go_0, WORD *_swig_go_1) {
  tagNET_DVR_JPEGPARA *arg1 = (tagNET_DVR_JPEGPARA *) 0 ;
  WORD arg2 ;
  WORD *argp2 ;
  
  arg1 = *(tagNET_DVR_JPEGPARA **)&_swig_go_0; 
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  if (arg1) (arg1)->wPicSize = arg2;
  
}


WORD *_wrap_NET_DVR_JPEGPARA_wPicSize_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_JPEGPARA *_swig_go_0) {
  tagNET_DVR_JPEGPARA *arg1 = (tagNET_DVR_JPEGPARA *) 0 ;
  WORD result;
  WORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_JPEGPARA **)&_swig_go_0; 
  
  result =  ((arg1)->wPicSize);
  *(WORD **)&_swig_go_result = new WORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_JPEGPARA_wPicQuality_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_JPEGPARA *_swig_go_0, WORD *_swig_go_1) {
  tagNET_DVR_JPEGPARA *arg1 = (tagNET_DVR_JPEGPARA *) 0 ;
  WORD arg2 ;
  WORD *argp2 ;
  
  arg1 = *(tagNET_DVR_JPEGPARA **)&_swig_go_0; 
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  if (arg1) (arg1)->wPicQuality = arg2;
  
}


WORD *_wrap_NET_DVR_JPEGPARA_wPicQuality_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_JPEGPARA *_swig_go_0) {
  tagNET_DVR_JPEGPARA *arg1 = (tagNET_DVR_JPEGPARA *) 0 ;
  WORD result;
  WORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_JPEGPARA **)&_swig_go_0; 
  
  result =  ((arg1)->wPicQuality);
  *(WORD **)&_swig_go_result = new WORD(result); 
  return _swig_go_result;
}


tagNET_DVR_JPEGPARA *_wrap_new_NET_DVR_JPEGPARA_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_JPEGPARA *result = 0 ;
  tagNET_DVR_JPEGPARA *_swig_go_result;
  
  
  result = (tagNET_DVR_JPEGPARA *)new tagNET_DVR_JPEGPARA();
  *(tagNET_DVR_JPEGPARA **)&_swig_go_result = (tagNET_DVR_JPEGPARA *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_JPEGPARA_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_JPEGPARA *_swig_go_0) {
  tagNET_DVR_JPEGPARA *arg1 = (tagNET_DVR_JPEGPARA *) 0 ;
  
  arg1 = *(tagNET_DVR_JPEGPARA **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_CLIENTINFO_lChannel_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0, LONG *_swig_go_1) {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  LONG arg2 ;
  LONG *argp2 ;
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  
  argp2 = (LONG *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg2 = (LONG)*argp2;
  
  
  if (arg1) (arg1)->lChannel = arg2;
  
}


LONG *_wrap_NET_DVR_CLIENTINFO_lChannel_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0) {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  LONG result;
  LONG *_swig_go_result;
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  
  result =  ((arg1)->lChannel);
  *(LONG **)&_swig_go_result = new LONG(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CLIENTINFO_lLinkMode_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0, LONG *_swig_go_1) {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  LONG arg2 ;
  LONG *argp2 ;
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  
  argp2 = (LONG *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg2 = (LONG)*argp2;
  
  
  if (arg1) (arg1)->lLinkMode = arg2;
  
}


LONG *_wrap_NET_DVR_CLIENTINFO_lLinkMode_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0) {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  LONG result;
  LONG *_swig_go_result;
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  
  result =  ((arg1)->lLinkMode);
  *(LONG **)&_swig_go_result = new LONG(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CLIENTINFO_hPlayWnd_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0, HWND *_swig_go_1) {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  
  argp2 = (HWND *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null HWND");
  }
  arg2 = (HWND)*argp2;
  
  
  if (arg1) (arg1)->hPlayWnd = arg2;
  
}


HWND *_wrap_NET_DVR_CLIENTINFO_hPlayWnd_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0) {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  HWND result;
  HWND *_swig_go_result;
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  
  result =  ((arg1)->hPlayWnd);
  *(HWND **)&_swig_go_result = new HWND(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CLIENTINFO_sMultiCastIP_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0, _gostring_ _swig_go_1) {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    delete [] arg1->sMultiCastIP;
    if (arg2) {
      arg1->sMultiCastIP = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->sMultiCastIP, (const char *)arg2);
    } else {
      arg1->sMultiCastIP = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_NET_DVR_CLIENTINFO_sMultiCastIP_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0) {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  
  result = (char *) ((arg1)->sMultiCastIP);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CLIENTINFO_byProtoType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byProtoType = arg2;
  
}


BYTE *_wrap_NET_DVR_CLIENTINFO_byProtoType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0) {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  
  result =  ((arg1)->byProtoType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CLIENTINFO_byRes_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0, BYTE (*_swig_go_1)[3]) {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_CLIENTINFO_byRes_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0))[3] {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[3];
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


tagNET_DVR_CLIENTINFO *_wrap_new_NET_DVR_CLIENTINFO_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_CLIENTINFO *result = 0 ;
  tagNET_DVR_CLIENTINFO *_swig_go_result;
  
  
  result = (tagNET_DVR_CLIENTINFO *)new tagNET_DVR_CLIENTINFO();
  *(tagNET_DVR_CLIENTINFO **)&_swig_go_result = (tagNET_DVR_CLIENTINFO *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_CLIENTINFO_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CLIENTINFO *_swig_go_0) {
  tagNET_DVR_CLIENTINFO *arg1 = (tagNET_DVR_CLIENTINFO *) 0 ;
  
  arg1 = *(tagNET_DVR_CLIENTINFO **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_PREVIEWINFO_lChannel_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, LONG *_swig_go_1) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  LONG arg2 ;
  LONG *argp2 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  argp2 = (LONG *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg2 = (LONG)*argp2;
  
  
  if (arg1) (arg1)->lChannel = arg2;
  
}


LONG *_wrap_NET_DVR_PREVIEWINFO_lChannel_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  LONG result;
  LONG *_swig_go_result;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result =  ((arg1)->lChannel);
  *(LONG **)&_swig_go_result = new LONG(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_dwStreamType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwStreamType = arg2;
  
}


DWORD *_wrap_NET_DVR_PREVIEWINFO_dwStreamType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result =  ((arg1)->dwStreamType);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_dwLinkMode_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwLinkMode = arg2;
  
}


DWORD *_wrap_NET_DVR_PREVIEWINFO_dwLinkMode_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result =  ((arg1)->dwLinkMode);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_hPlayWnd_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, HWND *_swig_go_1) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  argp2 = (HWND *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null HWND");
  }
  arg2 = (HWND)*argp2;
  
  
  if (arg1) (arg1)->hPlayWnd = arg2;
  
}


HWND *_wrap_NET_DVR_PREVIEWINFO_hPlayWnd_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  HWND result;
  HWND *_swig_go_result;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result =  ((arg1)->hPlayWnd);
  *(HWND **)&_swig_go_result = new HWND(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_bBlocked_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->bBlocked = arg2;
  
}


DWORD *_wrap_NET_DVR_PREVIEWINFO_bBlocked_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result =  ((arg1)->bBlocked);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_bPassbackRecord_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->bPassbackRecord = arg2;
  
}


DWORD *_wrap_NET_DVR_PREVIEWINFO_bPassbackRecord_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result =  ((arg1)->bPassbackRecord);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_byPreviewMode_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byPreviewMode = arg2;
  
}


BYTE *_wrap_NET_DVR_PREVIEWINFO_byPreviewMode_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result =  ((arg1)->byPreviewMode);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_byStreamID_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, BYTE (*_swig_go_1)[32]) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byStreamID;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_PREVIEWINFO_byStreamID_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0))[32] {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[32];
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byStreamID);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_byProtoType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byProtoType = arg2;
  
}


BYTE *_wrap_NET_DVR_PREVIEWINFO_byProtoType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result =  ((arg1)->byProtoType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_byRes1_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byRes1 = arg2;
  
}


BYTE *_wrap_NET_DVR_PREVIEWINFO_byRes1_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result =  ((arg1)->byRes1);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_byVideoCodingType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byVideoCodingType = arg2;
  
}


BYTE *_wrap_NET_DVR_PREVIEWINFO_byVideoCodingType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result =  ((arg1)->byVideoCodingType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_dwDisplayBufNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwDisplayBufNum = arg2;
  
}


DWORD *_wrap_NET_DVR_PREVIEWINFO_dwDisplayBufNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result =  ((arg1)->dwDisplayBufNum);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_byNPQMode_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byNPQMode = arg2;
  
}


BYTE *_wrap_NET_DVR_PREVIEWINFO_byNPQMode_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result =  ((arg1)->byNPQMode);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_PREVIEWINFO_byRes_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0, BYTE (*_swig_go_1)[215]) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes;
    for (ii = 0; ii < (size_t)215; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_PREVIEWINFO_byRes_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0))[215] {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[215];
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


tagNET_DVR_PREVIEWINFO *_wrap_new_NET_DVR_PREVIEWINFO_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_PREVIEWINFO *result = 0 ;
  tagNET_DVR_PREVIEWINFO *_swig_go_result;
  
  
  result = (tagNET_DVR_PREVIEWINFO *)new tagNET_DVR_PREVIEWINFO();
  *(tagNET_DVR_PREVIEWINFO **)&_swig_go_result = (tagNET_DVR_PREVIEWINFO *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_PREVIEWINFO_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_PREVIEWINFO *_swig_go_0) {
  tagNET_DVR_PREVIEWINFO *arg1 = (tagNET_DVR_PREVIEWINFO *) 0 ;
  
  arg1 = *(tagNET_DVR_PREVIEWINFO **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_ALARMER_byUserIDValid_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byUserIDValid = arg2;
  
}


BYTE *_wrap_NET_DVR_ALARMER_byUserIDValid_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->byUserIDValid);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_bySerialValid_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySerialValid = arg2;
  
}


BYTE *_wrap_NET_DVR_ALARMER_bySerialValid_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->bySerialValid);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_byVersionValid_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byVersionValid = arg2;
  
}


BYTE *_wrap_NET_DVR_ALARMER_byVersionValid_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->byVersionValid);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_byDeviceNameValid_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byDeviceNameValid = arg2;
  
}


BYTE *_wrap_NET_DVR_ALARMER_byDeviceNameValid_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->byDeviceNameValid);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_byMacAddrValid_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byMacAddrValid = arg2;
  
}


BYTE *_wrap_NET_DVR_ALARMER_byMacAddrValid_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->byMacAddrValid);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_byLinkPortValid_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byLinkPortValid = arg2;
  
}


BYTE *_wrap_NET_DVR_ALARMER_byLinkPortValid_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->byLinkPortValid);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_byDeviceIPValid_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byDeviceIPValid = arg2;
  
}


BYTE *_wrap_NET_DVR_ALARMER_byDeviceIPValid_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->byDeviceIPValid);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_bySocketIPValid_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySocketIPValid = arg2;
  
}


BYTE *_wrap_NET_DVR_ALARMER_bySocketIPValid_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->bySocketIPValid);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_lUserID_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, LONG *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  LONG arg2 ;
  LONG *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (LONG *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg2 = (LONG)*argp2;
  
  
  if (arg1) (arg1)->lUserID = arg2;
  
}


LONG *_wrap_NET_DVR_ALARMER_lUserID_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  LONG result;
  LONG *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->lUserID);
  *(LONG **)&_swig_go_result = new LONG(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_sSerialNumber_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE (*_swig_go_1)[48]) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->sSerialNumber;
    for (ii = 0; ii < (size_t)48; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMER_sSerialNumber_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0))[48] {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[48];
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->sSerialNumber);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_dwDeviceVersion_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwDeviceVersion = arg2;
  
}


DWORD *_wrap_NET_DVR_ALARMER_dwDeviceVersion_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->dwDeviceVersion);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_sDeviceName_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, _gostring_ _swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if(arg2) {
      strncpy((char*)arg1->sDeviceName, (const char *)arg2, 32-1);
      arg1->sDeviceName[32-1] = 0;
    } else {
      arg1->sDeviceName[0] = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_NET_DVR_ALARMER_sDeviceName_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result = (char *)(char *) ((arg1)->sDeviceName);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_byMacAddr_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE (*_swig_go_1)[6]) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byMacAddr;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMER_byMacAddr_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0))[6] {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[6];
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byMacAddr);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_wLinkPort_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, WORD *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  WORD arg2 ;
  WORD *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  if (arg1) (arg1)->wLinkPort = arg2;
  
}


WORD *_wrap_NET_DVR_ALARMER_wLinkPort_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  WORD result;
  WORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->wLinkPort);
  *(WORD **)&_swig_go_result = new WORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_sDeviceIP_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, _gostring_ _swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if(arg2) {
      strncpy((char*)arg1->sDeviceIP, (const char *)arg2, 128-1);
      arg1->sDeviceIP[128-1] = 0;
    } else {
      arg1->sDeviceIP[0] = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_NET_DVR_ALARMER_sDeviceIP_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result = (char *)(char *) ((arg1)->sDeviceIP);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_sSocketIP_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, _gostring_ _swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if(arg2) {
      strncpy((char*)arg1->sSocketIP, (const char *)arg2, 128-1);
      arg1->sSocketIP[128-1] = 0;
    } else {
      arg1->sSocketIP[0] = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_NET_DVR_ALARMER_sSocketIP_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result = (char *)(char *) ((arg1)->sSocketIP);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_byIpProtocol_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byIpProtocol = arg2;
  
}


BYTE *_wrap_NET_DVR_ALARMER_byIpProtocol_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->byIpProtocol);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_byRes1_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE (*_swig_go_1)[2]) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes1;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMER_byRes1_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0))[2] {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[2];
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes1);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_bJSONBroken_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bJSONBroken = arg2;
  
}


BYTE *_wrap_NET_DVR_ALARMER_bJSONBroken_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->bJSONBroken);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_wSocketPort_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, WORD *_swig_go_1) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  WORD arg2 ;
  WORD *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  if (arg1) (arg1)->wSocketPort = arg2;
  
}


WORD *_wrap_NET_DVR_ALARMER_wSocketPort_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  WORD result;
  WORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result =  ((arg1)->wSocketPort);
  *(WORD **)&_swig_go_result = new WORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMER_byRes2_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0, BYTE (*_swig_go_1)[6]) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes2;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMER_byRes2_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0))[6] {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[6];
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


tagNET_DVR_ALARMER *_wrap_new_NET_DVR_ALARMER_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_ALARMER *result = 0 ;
  tagNET_DVR_ALARMER *_swig_go_result;
  
  
  result = (tagNET_DVR_ALARMER *)new tagNET_DVR_ALARMER();
  *(tagNET_DVR_ALARMER **)&_swig_go_result = (tagNET_DVR_ALARMER *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_ALARMER_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMER *_swig_go_0) {
  tagNET_DVR_ALARMER *arg1 = (tagNET_DVR_ALARMER *) 0 ;
  
  arg1 = *(tagNET_DVR_ALARMER **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_SETUPALARM_PARAM_dwSize_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwSize = arg2;
  
}


DWORD *_wrap_NET_DVR_SETUPALARM_PARAM_dwSize_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->dwSize);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_byLevel_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byLevel = arg2;
  
}


BYTE *_wrap_NET_DVR_SETUPALARM_PARAM_byLevel_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->byLevel);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_byAlarmInfoType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byAlarmInfoType = arg2;
  
}


BYTE *_wrap_NET_DVR_SETUPALARM_PARAM_byAlarmInfoType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->byAlarmInfoType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_byRetAlarmTypeV40_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byRetAlarmTypeV40 = arg2;
  
}


BYTE *_wrap_NET_DVR_SETUPALARM_PARAM_byRetAlarmTypeV40_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->byRetAlarmTypeV40);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_byRetDevInfoVersion_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byRetDevInfoVersion = arg2;
  
}


BYTE *_wrap_NET_DVR_SETUPALARM_PARAM_byRetDevInfoVersion_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->byRetDevInfoVersion);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_byRetVQDAlarmType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byRetVQDAlarmType = arg2;
  
}


BYTE *_wrap_NET_DVR_SETUPALARM_PARAM_byRetVQDAlarmType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->byRetVQDAlarmType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_byFaceAlarmDetection_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byFaceAlarmDetection = arg2;
  
}


BYTE *_wrap_NET_DVR_SETUPALARM_PARAM_byFaceAlarmDetection_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->byFaceAlarmDetection);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_bySupport_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySupport = arg2;
  
}


BYTE *_wrap_NET_DVR_SETUPALARM_PARAM_bySupport_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->bySupport);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_byBrokenNetHttp_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byBrokenNetHttp = arg2;
  
}


BYTE *_wrap_NET_DVR_SETUPALARM_PARAM_byBrokenNetHttp_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->byBrokenNetHttp);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_wTaskNo_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, WORD *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  WORD arg2 ;
  WORD *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  if (arg1) (arg1)->wTaskNo = arg2;
  
}


WORD *_wrap_NET_DVR_SETUPALARM_PARAM_wTaskNo_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  WORD result;
  WORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->wTaskNo);
  *(WORD **)&_swig_go_result = new WORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_byDeployType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byDeployType = arg2;
  
}


BYTE *_wrap_NET_DVR_SETUPALARM_PARAM_byDeployType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->byDeployType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_byRes1_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, BYTE (*_swig_go_1)[3]) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes1;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_SETUPALARM_PARAM_byRes1_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0))[3] {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[3];
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes1);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_byAlarmTypeURL_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byAlarmTypeURL = arg2;
  
}


BYTE *_wrap_NET_DVR_SETUPALARM_PARAM_byAlarmTypeURL_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->byAlarmTypeURL);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_SETUPALARM_PARAM_byCustomCtrl_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byCustomCtrl = arg2;
  
}


BYTE *_wrap_NET_DVR_SETUPALARM_PARAM_byCustomCtrl_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  result =  ((arg1)->byCustomCtrl);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


tagNET_DVR_SETUPALARM_PARAM *_wrap_new_NET_DVR_SETUPALARM_PARAM_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_SETUPALARM_PARAM *result = 0 ;
  tagNET_DVR_SETUPALARM_PARAM *_swig_go_result;
  
  
  result = (tagNET_DVR_SETUPALARM_PARAM *)new tagNET_DVR_SETUPALARM_PARAM();
  *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_result = (tagNET_DVR_SETUPALARM_PARAM *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_SETUPALARM_PARAM_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_SETUPALARM_PARAM *_swig_go_0) {
  tagNET_DVR_SETUPALARM_PARAM *arg1 = (tagNET_DVR_SETUPALARM_PARAM *) 0 ;
  
  arg1 = *(tagNET_DVR_SETUPALARM_PARAM **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_ACS_WORK_STATUS_dwSize_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwSize = arg2;
  
}


DWORD *_wrap_NET_DVR_ACS_WORK_STATUS_dwSize_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result =  ((arg1)->dwSize);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byDoorLockStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE (*_swig_go_1)[32]) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byDoorLockStatus;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ACS_WORK_STATUS_byDoorLockStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0))[32] {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[32];
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byDoorLockStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byDoorStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE (*_swig_go_1)[32]) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byDoorStatus;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ACS_WORK_STATUS_byDoorStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0))[32] {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[32];
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byDoorStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byMagneticStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE (*_swig_go_1)[32]) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byMagneticStatus;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ACS_WORK_STATUS_byMagneticStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0))[32] {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[32];
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byMagneticStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byCaseStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE (*_swig_go_1)[8]) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byCaseStatus;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ACS_WORK_STATUS_byCaseStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0))[8] {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[8];
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byCaseStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_wBatteryVoltage_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, WORD *_swig_go_1) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  WORD arg2 ;
  WORD *argp2 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  if (arg1) (arg1)->wBatteryVoltage = arg2;
  
}


WORD *_wrap_NET_DVR_ACS_WORK_STATUS_wBatteryVoltage_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  WORD result;
  WORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result =  ((arg1)->wBatteryVoltage);
  *(WORD **)&_swig_go_result = new WORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byBatteryLowVoltage_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byBatteryLowVoltage = arg2;
  
}


BYTE *_wrap_NET_DVR_ACS_WORK_STATUS_byBatteryLowVoltage_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result =  ((arg1)->byBatteryLowVoltage);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byPowerSupplyStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byPowerSupplyStatus = arg2;
  
}


BYTE *_wrap_NET_DVR_ACS_WORK_STATUS_byPowerSupplyStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result =  ((arg1)->byPowerSupplyStatus);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byMultiDoorInterlockStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byMultiDoorInterlockStatus = arg2;
  
}


BYTE *_wrap_NET_DVR_ACS_WORK_STATUS_byMultiDoorInterlockStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result =  ((arg1)->byMultiDoorInterlockStatus);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byAntiSneakStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byAntiSneakStatus = arg2;
  
}


BYTE *_wrap_NET_DVR_ACS_WORK_STATUS_byAntiSneakStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result =  ((arg1)->byAntiSneakStatus);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byHostAntiDismantleStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byHostAntiDismantleStatus = arg2;
  
}


BYTE *_wrap_NET_DVR_ACS_WORK_STATUS_byHostAntiDismantleStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result =  ((arg1)->byHostAntiDismantleStatus);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byIndicatorLightStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byIndicatorLightStatus = arg2;
  
}


BYTE *_wrap_NET_DVR_ACS_WORK_STATUS_byIndicatorLightStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result =  ((arg1)->byIndicatorLightStatus);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byCardReaderOnlineStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE (*_swig_go_1)[64]) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byCardReaderOnlineStatus;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ACS_WORK_STATUS_byCardReaderOnlineStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0))[64] {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[64];
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byCardReaderOnlineStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byCardReaderAntiDismantleStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE (*_swig_go_1)[64]) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byCardReaderAntiDismantleStatus;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ACS_WORK_STATUS_byCardReaderAntiDismantleStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0))[64] {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[64];
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byCardReaderAntiDismantleStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byCardReaderVerifyMode_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE (*_swig_go_1)[64]) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byCardReaderVerifyMode;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ACS_WORK_STATUS_byCardReaderVerifyMode_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0))[64] {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[64];
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byCardReaderVerifyMode);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_bySetupAlarmStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->bySetupAlarmStatus;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ACS_WORK_STATUS_bySetupAlarmStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0))[512] {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->bySetupAlarmStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byAlarmInStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byAlarmInStatus;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ACS_WORK_STATUS_byAlarmInStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0))[512] {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmInStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byAlarmOutStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byAlarmOutStatus;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ACS_WORK_STATUS_byAlarmOutStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0))[512] {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmOutStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_dwCardNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwCardNum = arg2;
  
}


DWORD *_wrap_NET_DVR_ACS_WORK_STATUS_dwCardNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result =  ((arg1)->dwCardNum);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ACS_WORK_STATUS_byRes2_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0, BYTE (*_swig_go_1)[32]) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes2;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ACS_WORK_STATUS_byRes2_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0))[32] {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[32];
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


tagNET_DVR_ACS_WORK_STATUS *_wrap_new_NET_DVR_ACS_WORK_STATUS_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_ACS_WORK_STATUS *result = 0 ;
  tagNET_DVR_ACS_WORK_STATUS *_swig_go_result;
  
  
  result = (tagNET_DVR_ACS_WORK_STATUS *)new tagNET_DVR_ACS_WORK_STATUS();
  *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_result = (tagNET_DVR_ACS_WORK_STATUS *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_ACS_WORK_STATUS_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ACS_WORK_STATUS *_swig_go_0) {
  tagNET_DVR_ACS_WORK_STATUS *arg1 = (tagNET_DVR_ACS_WORK_STATUS *) 0 ;
  
  arg1 = *(tagNET_DVR_ACS_WORK_STATUS **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_CARD_COND_dwSize_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CARD_COND *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_CARD_COND *arg1 = (tagNET_DVR_CARD_COND *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_CARD_COND **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwSize = arg2;
  
}


DWORD *_wrap_NET_DVR_CARD_COND_dwSize_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CARD_COND *_swig_go_0) {
  tagNET_DVR_CARD_COND *arg1 = (tagNET_DVR_CARD_COND *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_CARD_COND **)&_swig_go_0; 
  
  result =  ((arg1)->dwSize);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_COND_dwCardNum_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CARD_COND *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_CARD_COND *arg1 = (tagNET_DVR_CARD_COND *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_CARD_COND **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwCardNum = arg2;
  
}


DWORD *_wrap_NET_DVR_CARD_COND_dwCardNum_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CARD_COND *_swig_go_0) {
  tagNET_DVR_CARD_COND *arg1 = (tagNET_DVR_CARD_COND *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_CARD_COND **)&_swig_go_0; 
  
  result =  ((arg1)->dwCardNum);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_COND_byRes_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CARD_COND *_swig_go_0, BYTE (*_swig_go_1)[64]) {
  tagNET_DVR_CARD_COND *arg1 = (tagNET_DVR_CARD_COND *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_CARD_COND **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_CARD_COND_byRes_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CARD_COND *_swig_go_0))[64] {
  tagNET_DVR_CARD_COND *arg1 = (tagNET_DVR_CARD_COND *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[64];
  
  arg1 = *(tagNET_DVR_CARD_COND **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


tagNET_DVR_CARD_COND *_wrap_new_NET_DVR_CARD_COND_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_CARD_COND *result = 0 ;
  tagNET_DVR_CARD_COND *_swig_go_result;
  
  
  result = (tagNET_DVR_CARD_COND *)new tagNET_DVR_CARD_COND();
  *(tagNET_DVR_CARD_COND **)&_swig_go_result = (tagNET_DVR_CARD_COND *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_CARD_COND_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_CARD_COND *_swig_go_0) {
  tagNET_DVR_CARD_COND *arg1 = (tagNET_DVR_CARD_COND *) 0 ;
  
  arg1 = *(tagNET_DVR_CARD_COND **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_CARD_CFG_COND_dwSize_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0, DWORD *_swig_go_1) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwSize = arg2;
  
}


DWORD *_wrap_NET_DVR_CARD_CFG_COND_dwSize_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  result =  ((arg1)->dwSize);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_CFG_COND_dwCardNum_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0, DWORD *_swig_go_1) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwCardNum = arg2;
  
}


DWORD *_wrap_NET_DVR_CARD_CFG_COND_dwCardNum_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  result =  ((arg1)->dwCardNum);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_CFG_COND_byCheckCardNo_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0, BYTE *_swig_go_1) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byCheckCardNo = arg2;
  
}


BYTE *_wrap_NET_DVR_CARD_CFG_COND_byCheckCardNo_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  result =  ((arg1)->byCheckCardNo);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_CFG_COND_byRes1_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0, BYTE (*_swig_go_1)[3]) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes1;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_CARD_CFG_COND_byRes1_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0))[3] {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[3];
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes1);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_CFG_COND_wLocalControllerID_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0, WORD *_swig_go_1) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  WORD arg2 ;
  WORD *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  if (arg1) (arg1)->wLocalControllerID = arg2;
  
}


WORD *_wrap_NET_DVR_CARD_CFG_COND_wLocalControllerID_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  WORD result;
  WORD *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  result =  ((arg1)->wLocalControllerID);
  *(WORD **)&_swig_go_result = new WORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_CFG_COND_byRes2_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0, BYTE (*_swig_go_1)[2]) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes2;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_CARD_CFG_COND_byRes2_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0))[2] {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[2];
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_CFG_COND_dwLockID_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0, DWORD *_swig_go_1) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwLockID = arg2;
  
}


DWORD *_wrap_NET_DVR_CARD_CFG_COND_dwLockID_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  result =  ((arg1)->dwLockID);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_CFG_COND_byRes3_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0, BYTE (*_swig_go_1)[20]) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes3;
    for (ii = 0; ii < (size_t)20; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_CARD_CFG_COND_byRes3_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0))[20] {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[20];
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes3);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


_NET_DVR_CARD_CFG_COND *_wrap_new_NET_DVR_CARD_CFG_COND_HKIPcamera_f77b1fde7b65d287() {
  _NET_DVR_CARD_CFG_COND *result = 0 ;
  _NET_DVR_CARD_CFG_COND *_swig_go_result;
  
  
  result = (_NET_DVR_CARD_CFG_COND *)new _NET_DVR_CARD_CFG_COND();
  *(_NET_DVR_CARD_CFG_COND **)&_swig_go_result = (_NET_DVR_CARD_CFG_COND *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_CARD_CFG_COND_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_CFG_COND *_swig_go_0) {
  _NET_DVR_CARD_CFG_COND *arg1 = (_NET_DVR_CARD_CFG_COND *) 0 ;
  
  arg1 = *(_NET_DVR_CARD_CFG_COND **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_TIME_EX_wYear_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0, WORD *_swig_go_1) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  WORD arg2 ;
  WORD *argp2 ;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  if (arg1) (arg1)->wYear = arg2;
  
}


WORD *_wrap_NET_DVR_TIME_EX_wYear_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  WORD result;
  WORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  result =  ((arg1)->wYear);
  *(WORD **)&_swig_go_result = new WORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_TIME_EX_byMonth_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byMonth = arg2;
  
}


BYTE *_wrap_NET_DVR_TIME_EX_byMonth_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  result =  ((arg1)->byMonth);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_TIME_EX_byDay_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byDay = arg2;
  
}


BYTE *_wrap_NET_DVR_TIME_EX_byDay_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  result =  ((arg1)->byDay);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_TIME_EX_byHour_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byHour = arg2;
  
}


BYTE *_wrap_NET_DVR_TIME_EX_byHour_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  result =  ((arg1)->byHour);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_TIME_EX_byMinute_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byMinute = arg2;
  
}


BYTE *_wrap_NET_DVR_TIME_EX_byMinute_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  result =  ((arg1)->byMinute);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_TIME_EX_bySecond_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->bySecond = arg2;
  
}


BYTE *_wrap_NET_DVR_TIME_EX_bySecond_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  result =  ((arg1)->bySecond);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_TIME_EX_byRes_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byRes = arg2;
  
}


BYTE *_wrap_NET_DVR_TIME_EX_byRes_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  result =  ((arg1)->byRes);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


tagNET_DVR_TIME_EX *_wrap_new_NET_DVR_TIME_EX_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_TIME_EX *result = 0 ;
  tagNET_DVR_TIME_EX *_swig_go_result;
  
  
  result = (tagNET_DVR_TIME_EX *)new tagNET_DVR_TIME_EX();
  *(tagNET_DVR_TIME_EX **)&_swig_go_result = (tagNET_DVR_TIME_EX *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_TIME_EX_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_TIME_EX *_swig_go_0) {
  tagNET_DVR_TIME_EX *arg1 = (tagNET_DVR_TIME_EX *) 0 ;
  
  arg1 = *(tagNET_DVR_TIME_EX **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_VALID_PERIOD_CFG_byEnable_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byEnable = arg2;
  
}


BYTE *_wrap_NET_DVR_VALID_PERIOD_CFG_byEnable_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  result =  ((arg1)->byEnable);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_VALID_PERIOD_CFG_byBeginTimeFlag_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byBeginTimeFlag = arg2;
  
}


BYTE *_wrap_NET_DVR_VALID_PERIOD_CFG_byBeginTimeFlag_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  result =  ((arg1)->byBeginTimeFlag);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_VALID_PERIOD_CFG_byEnableTimeFlag_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byEnableTimeFlag = arg2;
  
}


BYTE *_wrap_NET_DVR_VALID_PERIOD_CFG_byEnableTimeFlag_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  result =  ((arg1)->byEnableTimeFlag);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_VALID_PERIOD_CFG_byTimeDurationNo_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byTimeDurationNo = arg2;
  
}


BYTE *_wrap_NET_DVR_VALID_PERIOD_CFG_byTimeDurationNo_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  result =  ((arg1)->byTimeDurationNo);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_VALID_PERIOD_CFG_struBeginTime_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0, tagNET_DVR_TIME_EX *_swig_go_1) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  NET_DVR_TIME_EX *arg2 = (NET_DVR_TIME_EX *) 0 ;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  arg2 = *(NET_DVR_TIME_EX **)&_swig_go_1; 
  
  if (arg1) (arg1)->struBeginTime = *arg2;
  
}


tagNET_DVR_TIME_EX *_wrap_NET_DVR_VALID_PERIOD_CFG_struBeginTime_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  NET_DVR_TIME_EX *result = 0 ;
  tagNET_DVR_TIME_EX *_swig_go_result;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  result = (NET_DVR_TIME_EX *)& ((arg1)->struBeginTime);
  *(NET_DVR_TIME_EX **)&_swig_go_result = (NET_DVR_TIME_EX *)result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_VALID_PERIOD_CFG_struEndTime_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0, tagNET_DVR_TIME_EX *_swig_go_1) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  NET_DVR_TIME_EX *arg2 = (NET_DVR_TIME_EX *) 0 ;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  arg2 = *(NET_DVR_TIME_EX **)&_swig_go_1; 
  
  if (arg1) (arg1)->struEndTime = *arg2;
  
}


tagNET_DVR_TIME_EX *_wrap_NET_DVR_VALID_PERIOD_CFG_struEndTime_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  NET_DVR_TIME_EX *result = 0 ;
  tagNET_DVR_TIME_EX *_swig_go_result;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  result = (NET_DVR_TIME_EX *)& ((arg1)->struEndTime);
  *(NET_DVR_TIME_EX **)&_swig_go_result = (NET_DVR_TIME_EX *)result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_VALID_PERIOD_CFG_byTimeType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0, BYTE *_swig_go_1) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byTimeType = arg2;
  
}


BYTE *_wrap_NET_DVR_VALID_PERIOD_CFG_byTimeType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  result =  ((arg1)->byTimeType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_VALID_PERIOD_CFG_byRes2_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0, BYTE (*_swig_go_1)[31]) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes2;
    for (ii = 0; ii < (size_t)31; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_VALID_PERIOD_CFG_byRes2_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0))[31] {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[31];
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes2);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


tagNET_DVR_VALID_PERIOD_CFG *_wrap_new_NET_DVR_VALID_PERIOD_CFG_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_VALID_PERIOD_CFG *result = 0 ;
  tagNET_DVR_VALID_PERIOD_CFG *_swig_go_result;
  
  
  result = (tagNET_DVR_VALID_PERIOD_CFG *)new tagNET_DVR_VALID_PERIOD_CFG();
  *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_result = (tagNET_DVR_VALID_PERIOD_CFG *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_VALID_PERIOD_CFG_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_VALID_PERIOD_CFG *_swig_go_0) {
  tagNET_DVR_VALID_PERIOD_CFG *arg1 = (tagNET_DVR_VALID_PERIOD_CFG *) 0 ;
  
  arg1 = *(tagNET_DVR_VALID_PERIOD_CFG **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_CARD_RECORD_dwSize_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, DWORD *_swig_go_1) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwSize = arg2;
  
}


DWORD *_wrap_NET_DVR_CARD_RECORD_dwSize_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result =  ((arg1)->dwSize);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_byCardNo_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, BYTE (*_swig_go_1)[32]) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byCardNo;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_CARD_RECORD_byCardNo_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0))[32] {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[32];
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byCardNo);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_byCardType_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, BYTE *_swig_go_1) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byCardType = arg2;
  
}


BYTE *_wrap_NET_DVR_CARD_RECORD_byCardType_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result =  ((arg1)->byCardType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_byLeaderCard_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, BYTE *_swig_go_1) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byLeaderCard = arg2;
  
}


BYTE *_wrap_NET_DVR_CARD_RECORD_byLeaderCard_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result =  ((arg1)->byLeaderCard);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_byUserType_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, BYTE *_swig_go_1) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byUserType = arg2;
  
}


BYTE *_wrap_NET_DVR_CARD_RECORD_byUserType_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result =  ((arg1)->byUserType);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_byRes1_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, BYTE *_swig_go_1) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE arg2 ;
  BYTE *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  argp2 = (BYTE *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BYTE");
  }
  arg2 = (BYTE)*argp2;
  
  
  if (arg1) (arg1)->byRes1 = arg2;
  
}


BYTE *_wrap_NET_DVR_CARD_RECORD_byRes1_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE result;
  BYTE *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result =  ((arg1)->byRes1);
  *(BYTE **)&_swig_go_result = new BYTE(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_byDoorRight_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, BYTE (*_swig_go_1)[256]) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byDoorRight;
    for (ii = 0; ii < (size_t)256; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_CARD_RECORD_byDoorRight_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0))[256] {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[256];
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byDoorRight);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_struValid_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, tagNET_DVR_VALID_PERIOD_CFG *_swig_go_1) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  NET_DVR_VALID_PERIOD_CFG *arg2 = (NET_DVR_VALID_PERIOD_CFG *) 0 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  arg2 = *(NET_DVR_VALID_PERIOD_CFG **)&_swig_go_1; 
  
  if (arg1) (arg1)->struValid = *arg2;
  
}


tagNET_DVR_VALID_PERIOD_CFG *_wrap_NET_DVR_CARD_RECORD_struValid_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  NET_DVR_VALID_PERIOD_CFG *result = 0 ;
  tagNET_DVR_VALID_PERIOD_CFG *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result = (NET_DVR_VALID_PERIOD_CFG *)& ((arg1)->struValid);
  *(NET_DVR_VALID_PERIOD_CFG **)&_swig_go_result = (NET_DVR_VALID_PERIOD_CFG *)result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_byBelongGroup_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, BYTE (*_swig_go_1)[128]) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byBelongGroup;
    for (ii = 0; ii < (size_t)128; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_CARD_RECORD_byBelongGroup_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0))[128] {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[128];
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byBelongGroup);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_byCardPassword_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, BYTE (*_swig_go_1)[8]) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byCardPassword;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_CARD_RECORD_byCardPassword_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0))[8] {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[8];
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byCardPassword);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_wCardRightPlan_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, WORD (*_swig_go_1)[256]) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  WORD *arg2 = (WORD *) (WORD *)0 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  arg2 = *(WORD **)&_swig_go_1; 
  
  {
    size_t ii;
    WORD *b = (WORD *) arg1->wCardRightPlan;
    for (ii = 0; ii < (size_t)256; ii++) b[ii] = *((WORD *) arg2 + ii);
  }
  
}


WORD (*_wrap_NET_DVR_CARD_RECORD_wCardRightPlan_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0))[256] {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  WORD *result = 0 ;
  WORD (*_swig_go_result)[256];
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result = (WORD *)(WORD *) ((arg1)->wCardRightPlan);
  *(WORD **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_dwMaxSwipeTimes_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, DWORD *_swig_go_1) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwMaxSwipeTimes = arg2;
  
}


DWORD *_wrap_NET_DVR_CARD_RECORD_dwMaxSwipeTimes_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result =  ((arg1)->dwMaxSwipeTimes);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_dwSwipeTimes_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, DWORD *_swig_go_1) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwSwipeTimes = arg2;
  
}


DWORD *_wrap_NET_DVR_CARD_RECORD_dwSwipeTimes_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result =  ((arg1)->dwSwipeTimes);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_dwEmployeeNo_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, DWORD *_swig_go_1) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwEmployeeNo = arg2;
  
}


DWORD *_wrap_NET_DVR_CARD_RECORD_dwEmployeeNo_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result =  ((arg1)->dwEmployeeNo);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_byName_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, BYTE (*_swig_go_1)[32]) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byName;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_CARD_RECORD_byName_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0))[32] {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[32];
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byName);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_dwCardRight_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, DWORD *_swig_go_1) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwCardRight = arg2;
  
}


DWORD *_wrap_NET_DVR_CARD_RECORD_dwCardRight_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result =  ((arg1)->dwCardRight);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_CARD_RECORD_byRes_set_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0, BYTE (*_swig_go_1)[256]) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes;
    for (ii = 0; ii < (size_t)256; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_CARD_RECORD_byRes_get_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0))[256] {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[256];
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


_NET_DVR_CARD_RECORD *_wrap_new_NET_DVR_CARD_RECORD_HKIPcamera_f77b1fde7b65d287() {
  _NET_DVR_CARD_RECORD *result = 0 ;
  _NET_DVR_CARD_RECORD *_swig_go_result;
  
  
  result = (_NET_DVR_CARD_RECORD *)new _NET_DVR_CARD_RECORD();
  *(_NET_DVR_CARD_RECORD **)&_swig_go_result = (_NET_DVR_CARD_RECORD *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_CARD_RECORD_HKIPcamera_f77b1fde7b65d287(_NET_DVR_CARD_RECORD *_swig_go_0) {
  _NET_DVR_CARD_RECORD *arg1 = (_NET_DVR_CARD_RECORD *) 0 ;
  
  arg1 = *(_NET_DVR_CARD_RECORD **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_dwSize_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, DWORD *_swig_go_1) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  DWORD arg2 ;
  DWORD *argp2 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  if (arg1) (arg1)->dwSize = arg2;
  
}


DWORD *_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_dwSize_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  DWORD result;
  DWORD *_swig_go_result;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result =  ((arg1)->dwSize);
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_bySetupAlarmStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->bySetupAlarmStatus;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_bySetupAlarmStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[512] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->bySetupAlarmStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmInStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byAlarmInStatus;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmInStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[512] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmInStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmOutStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byAlarmOutStatus;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmOutStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[512] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmOutStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byBypassStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byBypassStatus;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byBypassStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[512] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byBypassStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_bySubSystemGuardStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[32]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->bySubSystemGuardStatus;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_bySubSystemGuardStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[32] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[32];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->bySubSystemGuardStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmInFaultStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byAlarmInFaultStatus;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmInFaultStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[512] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmInFaultStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmInMemoryStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byAlarmInMemoryStatus;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmInMemoryStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[512] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmInMemoryStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmInTamperStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byAlarmInTamperStatus;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmInTamperStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[512] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmInTamperStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byEnableSubSystem_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[32]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byEnableSubSystem;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byEnableSubSystem_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[32] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[32];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byEnableSubSystem);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_bySubSystemGuardType_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[32]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->bySubSystemGuardType;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_bySubSystemGuardType_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[32] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[32];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->bySubSystemGuardType);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_bySubSystemAlarm_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[32]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->bySubSystemAlarm;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_bySubSystemAlarm_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[32] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[32];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->bySubSystemAlarm);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmOutCharge_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byAlarmOutCharge;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmOutCharge_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[512] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmOutCharge);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmOutTamperStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byAlarmOutTamperStatus;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmOutTamperStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[512] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmOutTamperStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmInShieldedStatus_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byAlarmInShieldedStatus;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmInShieldedStatus_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[512] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmInShieldedStatus);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmOutLinkage_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byAlarmOutLinkage;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byAlarmOutLinkage_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[512] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byAlarmOutLinkage);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byRes_set_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0, BYTE (*_swig_go_1)[512]) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  arg2 = *(BYTE **)&_swig_go_1; 
  
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->byRes;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
  
}


BYTE (*_wrap_NET_DVR_ALARMHOST_MAIN_STATUS_V51_byRes_get_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0))[512] {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  BYTE *result = 0 ;
  BYTE (*_swig_go_result)[512];
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  result = (BYTE *)(BYTE *) ((arg1)->byRes);
  *(BYTE **)&_swig_go_result = result; 
  return _swig_go_result;
}


tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_wrap_new_NET_DVR_ALARMHOST_MAIN_STATUS_V51_HKIPcamera_f77b1fde7b65d287() {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *result = 0 ;
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_result;
  
  
  result = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *)new tagNET_DVR_ALARMHOST_MAIN_STATUS_V51();
  *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_result = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *)result; 
  return _swig_go_result;
}


void _wrap_delete_NET_DVR_ALARMHOST_MAIN_STATUS_V51_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *_swig_go_0) {
  tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *arg1 = (tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 *) 0 ;
  
  arg1 = *(tagNET_DVR_ALARMHOST_MAIN_STATUS_V51 **)&_swig_go_0; 
  
  delete arg1;
  
}


BOOL *_wrap_NET_DVR_Init_HKIPcamera_f77b1fde7b65d287() {
  BOOL result;
  BOOL *_swig_go_result;
  
  
  result = NET_DVR_Init();
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_Cleanup_HKIPcamera_f77b1fde7b65d287() {
  BOOL result;
  BOOL *_swig_go_result;
  
  
  result = NET_DVR_Cleanup();
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


LONG *_wrap_NET_DVR_Login_V30_HKIPcamera_f77b1fde7b65d287(_gostring_ _swig_go_0, WORD *_swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, tagNET_DVR_DEVICEINFO_V30 *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  WORD arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  LPNET_DVR_DEVICEINFO_V30 arg5 = (LPNET_DVR_DEVICEINFO_V30) 0 ;
  WORD *argp2 ;
  LONG result;
  LONG *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = *(LPNET_DVR_DEVICEINFO_V30 *)&_swig_go_4; 
  
  result = NET_DVR_Login_V30(arg1,SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
  *(LONG **)&_swig_go_result = new LONG(result); 
  free(arg1); 
  free(arg3); 
  free(arg4); 
  return _swig_go_result;
}


LONG *_wrap_NET_DVR_Login_V40_HKIPcamera_f77b1fde7b65d287(tagNET_DVR_USER_LOGIN_INFO *_swig_go_0, tagNET_DVR_DEVICEINFO_V40 *_swig_go_1) {
  LPNET_DVR_USER_LOGIN_INFO arg1 = (LPNET_DVR_USER_LOGIN_INFO) 0 ;
  LPNET_DVR_DEVICEINFO_V40 arg2 = (LPNET_DVR_DEVICEINFO_V40) 0 ;
  LONG result;
  LONG *_swig_go_result;
  
  arg1 = *(LPNET_DVR_USER_LOGIN_INFO *)&_swig_go_0; 
  arg2 = *(LPNET_DVR_DEVICEINFO_V40 *)&_swig_go_1; 
  
  result = NET_DVR_Login_V40(arg1,arg2);
  *(LONG **)&_swig_go_result = new LONG(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_Logout_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0) {
  LONG arg1 ;
  LONG *argp1 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  result = NET_DVR_Logout(SWIG_STD_MOVE(arg1));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_Logout_V30_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0) {
  LONG arg1 ;
  LONG *argp1 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  result = NET_DVR_Logout_V30(SWIG_STD_MOVE(arg1));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_SetConnectTime_HKIPcamera_f77b1fde7b65d287(DWORD *_swig_go_0, DWORD *_swig_go_1) {
  DWORD arg1 ;
  DWORD arg2 ;
  DWORD *argp1 ;
  DWORD *argp2 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (DWORD *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg1 = (DWORD)*argp1;
  
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  result = NET_DVR_SetConnectTime(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_SetReconnect_HKIPcamera_f77b1fde7b65d287(DWORD *_swig_go_0, BOOL *_swig_go_1) {
  DWORD arg1 ;
  BOOL arg2 ;
  DWORD *argp1 ;
  BOOL *argp2 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (DWORD *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg1 = (DWORD)*argp1;
  
  
  argp2 = (BOOL *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null BOOL");
  }
  arg2 = (BOOL)*argp2;
  
  
  result = NET_DVR_SetReconnect(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_CaptureJPEGPicture_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, LONG *_swig_go_1, tagNET_DVR_JPEGPARA *_swig_go_2, _gostring_ _swig_go_3) {
  LONG arg1 ;
  LONG arg2 ;
  LPNET_DVR_JPEGPARA arg3 = (LPNET_DVR_JPEGPARA) 0 ;
  char *arg4 = (char *) 0 ;
  LONG *argp1 ;
  LONG *argp2 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  argp2 = (LONG *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg2 = (LONG)*argp2;
  
  arg3 = *(LPNET_DVR_JPEGPARA *)&_swig_go_2; 
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = NET_DVR_CaptureJPEGPicture(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4);
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  free(arg4); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_SetLogToFile_HKIPcamera_f77b1fde7b65d287(DWORD *_swig_go_0, _gostring_ _swig_go_1, BOOL *_swig_go_2) {
  DWORD arg1 ;
  char *arg2 = (char *) 0 ;
  BOOL arg3 ;
  DWORD *argp1 ;
  BOOL *argp3 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (DWORD *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg1 = (DWORD)*argp1;
  
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (BOOL *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null BOOL");
  }
  arg3 = (BOOL)*argp3;
  
  
  result = NET_DVR_SetLogToFile(SWIG_STD_MOVE(arg1),arg2,SWIG_STD_MOVE(arg3));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  free(arg2); 
  return _swig_go_result;
}


LONG *_wrap_NET_DVR_RealPlay_V30_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, tagNET_DVR_CLIENTINFO *_swig_go_1, void* _swig_go_2, void *_swig_go_3, BOOL *_swig_go_4) {
  LONG arg1 ;
  LPNET_DVR_CLIENTINFO arg2 = (LPNET_DVR_CLIENTINFO) 0 ;
  void (*arg3)(LONG,DWORD,BYTE *,DWORD,void *) = (void (*)(LONG,DWORD,BYTE *,DWORD,void *)) 0 ;
  void *arg4 = (void *) 0 ;
  BOOL arg5 ;
  LONG *argp1 ;
  BOOL *argp5 ;
  LONG result;
  LONG *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  arg2 = *(LPNET_DVR_CLIENTINFO *)&_swig_go_1; 
  arg3 = *(void (**)(LONG,DWORD,BYTE *,DWORD,void *))&_swig_go_2; 
  arg4 = *(void **)&_swig_go_3; 
  
  argp5 = (BOOL *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null BOOL");
  }
  arg5 = (BOOL)*argp5;
  
  
  result = NET_DVR_RealPlay_V30(SWIG_STD_MOVE(arg1),arg2,arg3,arg4,SWIG_STD_MOVE(arg5));
  *(LONG **)&_swig_go_result = new LONG(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_ClosePreview_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, DWORD *_swig_go_1) {
  LONG arg1 ;
  DWORD arg2 ;
  LONG *argp1 ;
  DWORD *argp2 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  result = NET_DVR_ClosePreview(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_ClosePlayBack_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, DWORD *_swig_go_1) {
  LONG arg1 ;
  DWORD arg2 ;
  LONG *argp1 ;
  DWORD *argp2 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  result = NET_DVR_ClosePlayBack(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


LONG *_wrap_NET_DVR_RealPlay_V40_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, tagNET_DVR_PREVIEWINFO *_swig_go_1, void* _swig_go_2, void *_swig_go_3) {
  LONG arg1 ;
  LPNET_DVR_PREVIEWINFO arg2 = (LPNET_DVR_PREVIEWINFO) 0 ;
  REALDATACALLBACK arg3 = (REALDATACALLBACK) 0 ;
  void *arg4 = (void *) 0 ;
  LONG *argp1 ;
  LONG result;
  LONG *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  arg2 = *(LPNET_DVR_PREVIEWINFO *)&_swig_go_1; 
  arg3 = *(REALDATACALLBACK *)&_swig_go_2; 
  arg4 = *(void **)&_swig_go_3; 
  
  result = NET_DVR_RealPlay_V40(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  *(LONG **)&_swig_go_result = new LONG(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_SaveRealData_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, _gostring_ _swig_go_1) {
  LONG arg1 ;
  char *arg2 = (char *) 0 ;
  LONG *argp1 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = NET_DVR_SaveRealData(SWIG_STD_MOVE(arg1),arg2);
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  free(arg2); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_StopSaveRealData_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0) {
  LONG arg1 ;
  LONG *argp1 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  result = NET_DVR_StopSaveRealData(SWIG_STD_MOVE(arg1));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_PTZControlWithSpeed_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, DWORD *_swig_go_1, DWORD *_swig_go_2, DWORD *_swig_go_3) {
  LONG arg1 ;
  DWORD arg2 ;
  DWORD arg3 ;
  DWORD arg4 ;
  LONG *argp1 ;
  DWORD *argp2 ;
  DWORD *argp3 ;
  DWORD *argp4 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  argp3 = (DWORD *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg3 = (DWORD)*argp3;
  
  
  argp4 = (DWORD *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg4 = (DWORD)*argp4;
  
  
  result = NET_DVR_PTZControlWithSpeed(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_StopRealPlay_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0) {
  LONG arg1 ;
  LONG *argp1 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  result = NET_DVR_StopRealPlay(SWIG_STD_MOVE(arg1));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


LONG *_wrap_NET_DVR_SetupAlarmChan_V41_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, tagNET_DVR_SETUPALARM_PARAM *_swig_go_1) {
  LONG arg1 ;
  LPNET_DVR_SETUPALARM_PARAM arg2 = (LPNET_DVR_SETUPALARM_PARAM) 0 ;
  LONG *argp1 ;
  LONG result;
  LONG *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  arg2 = *(LPNET_DVR_SETUPALARM_PARAM *)&_swig_go_1; 
  
  result = NET_DVR_SetupAlarmChan_V41(SWIG_STD_MOVE(arg1),arg2);
  *(LONG **)&_swig_go_result = new LONG(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_CloseAlarmChan_V30_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0) {
  LONG arg1 ;
  LONG *argp1 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  result = NET_DVR_CloseAlarmChan_V30(SWIG_STD_MOVE(arg1));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


BOOL *_wrap_MSGCallBack_V31_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, tagNET_DVR_ALARMER *_swig_go_1, _gostring_ _swig_go_2, DWORD *_swig_go_3, void *_swig_go_4) {
  LONG arg1 ;
  NET_DVR_ALARMER *arg2 = (NET_DVR_ALARMER *) 0 ;
  char *arg3 = (char *) 0 ;
  DWORD arg4 ;
  void *arg5 = (void *) 0 ;
  LONG *argp1 ;
  DWORD *argp4 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  arg2 = *(NET_DVR_ALARMER **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  argp4 = (DWORD *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg4 = (DWORD)*argp4;
  
  arg5 = *(void **)&_swig_go_4; 
  
  result = MSGCallBack_V31(SWIG_STD_MOVE(arg1),arg2,arg3,SWIG_STD_MOVE(arg4),arg5);
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  free(arg3); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_SetDVRMessageCallBack_V31_HKIPcamera_f77b1fde7b65d287(MSGCallBack_V31 *_swig_go_0, void *_swig_go_1) {
  MSGCallBack_V31 arg1 ;
  void *arg2 = (void *) 0 ;
  MSGCallBack_V31 *argp1 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (MSGCallBack_V31 *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null MSGCallBack_V31");
  }
  arg1 = (MSGCallBack_V31)*argp1;
  
  arg2 = *(void **)&_swig_go_1; 
  
  result = NET_DVR_SetDVRMessageCallBack_V31(SWIG_STD_MOVE(arg1),arg2);
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_GetDVRConfig_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, DWORD *_swig_go_1, LONG *_swig_go_2, LPVOID *_swig_go_3, DWORD *_swig_go_4, LPDWORD *_swig_go_5) {
  LONG arg1 ;
  DWORD arg2 ;
  LONG arg3 ;
  LPVOID arg4 ;
  DWORD arg5 ;
  LPDWORD arg6 ;
  LONG *argp1 ;
  DWORD *argp2 ;
  LONG *argp3 ;
  LPVOID *argp4 ;
  DWORD *argp5 ;
  LPDWORD *argp6 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  argp3 = (LONG *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg3 = (LONG)*argp3;
  
  
  argp4 = (LPVOID *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null LPVOID");
  }
  arg4 = (LPVOID)*argp4;
  
  
  argp5 = (DWORD *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg5 = (DWORD)*argp5;
  
  
  argp6 = (LPDWORD *)_swig_go_5;
  if (argp6 == NULL) {
    _swig_gopanic("Attempt to dereference null LPDWORD");
  }
  arg6 = (LPDWORD)*argp6;
  
  
  result = NET_DVR_GetDVRConfig(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5),SWIG_STD_MOVE(arg6));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_ControlGateway_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, LONG *_swig_go_1, DWORD *_swig_go_2) {
  LONG arg1 ;
  LONG arg2 ;
  DWORD arg3 ;
  LONG *argp1 ;
  LONG *argp2 ;
  DWORD *argp3 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  argp2 = (LONG *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg2 = (LONG)*argp2;
  
  
  argp3 = (DWORD *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg3 = (DWORD)*argp3;
  
  
  result = NET_DVR_ControlGateway(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


void _wrap_fRemoteConfigCallback_HKIPcamera_f77b1fde7b65d287(DWORD *_swig_go_0, void *_swig_go_1, DWORD *_swig_go_2, void *_swig_go_3) {
  DWORD arg1 ;
  void *arg2 = (void *) 0 ;
  DWORD arg3 ;
  void *arg4 = (void *) 0 ;
  DWORD *argp1 ;
  DWORD *argp3 ;
  
  
  argp1 = (DWORD *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg1 = (DWORD)*argp1;
  
  arg2 = *(void **)&_swig_go_1; 
  
  argp3 = (DWORD *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg3 = (DWORD)*argp3;
  
  arg4 = *(void **)&_swig_go_3; 
  
  fRemoteConfigCallback(SWIG_STD_MOVE(arg1),arg2,SWIG_STD_MOVE(arg3),arg4);
  
}


LONG *_wrap_NET_DVR_StartRemoteConfig_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, DWORD *_swig_go_1, LPVOID *_swig_go_2, DWORD *_swig_go_3, fRemoteConfigCallback *_swig_go_4, LPVOID *_swig_go_5) {
  LONG arg1 ;
  DWORD arg2 ;
  LPVOID arg3 ;
  DWORD arg4 ;
  fRemoteConfigCallback arg5 ;
  LPVOID arg6 ;
  LONG *argp1 ;
  DWORD *argp2 ;
  LPVOID *argp3 ;
  DWORD *argp4 ;
  fRemoteConfigCallback *argp5 ;
  LPVOID *argp6 ;
  LONG result;
  LONG *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  argp3 = (LPVOID *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null LPVOID");
  }
  arg3 = (LPVOID)*argp3;
  
  
  argp4 = (DWORD *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg4 = (DWORD)*argp4;
  
  
  argp5 = (fRemoteConfigCallback *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null fRemoteConfigCallback");
  }
  arg5 = (fRemoteConfigCallback)*argp5;
  
  
  argp6 = (LPVOID *)_swig_go_5;
  if (argp6 == NULL) {
    _swig_gopanic("Attempt to dereference null LPVOID");
  }
  arg6 = (LPVOID)*argp6;
  
  
  result = NET_DVR_StartRemoteConfig(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5),SWIG_STD_MOVE(arg6));
  *(LONG **)&_swig_go_result = new LONG(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_StopRemoteConfig_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0) {
  LONG arg1 ;
  LONG *argp1 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  result = NET_DVR_StopRemoteConfig(SWIG_STD_MOVE(arg1));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


LONG *_wrap_NET_DVR_GetNextRemoteConfig_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, void *_swig_go_1, DWORD *_swig_go_2) {
  LONG arg1 ;
  void *arg2 = (void *) 0 ;
  DWORD arg3 ;
  LONG *argp1 ;
  DWORD *argp3 ;
  LONG result;
  LONG *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  arg2 = *(void **)&_swig_go_1; 
  
  argp3 = (DWORD *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg3 = (DWORD)*argp3;
  
  
  result = NET_DVR_GetNextRemoteConfig(SWIG_STD_MOVE(arg1),arg2,SWIG_STD_MOVE(arg3));
  *(LONG **)&_swig_go_result = new LONG(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_GetRemoteConfigState_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, void *_swig_go_1) {
  LONG arg1 ;
  void *arg2 = (void *) 0 ;
  LONG *argp1 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  arg2 = *(void **)&_swig_go_1; 
  
  result = NET_DVR_GetRemoteConfigState(SWIG_STD_MOVE(arg1),arg2);
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


BOOL *_wrap_NET_DVR_SendRemoteConfig_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, DWORD *_swig_go_1, _gostring_ _swig_go_2, DWORD *_swig_go_3) {
  LONG arg1 ;
  DWORD arg2 ;
  char *arg3 = (char *) 0 ;
  DWORD arg4 ;
  LONG *argp1 ;
  DWORD *argp2 ;
  DWORD *argp4 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  argp2 = (DWORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg2 = (DWORD)*argp2;
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  argp4 = (DWORD *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg4 = (DWORD)*argp4;
  
  
  result = NET_DVR_SendRemoteConfig(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,SWIG_STD_MOVE(arg4));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  free(arg3); 
  return _swig_go_result;
}


LONG *_wrap_NET_DVR_SendWithRecvRemoteConfig_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, void *_swig_go_1, DWORD *_swig_go_2, void *_swig_go_3, DWORD *_swig_go_4, DWORD *_swig_go_5) {
  LONG arg1 ;
  void *arg2 = (void *) 0 ;
  DWORD arg3 ;
  void *arg4 = (void *) 0 ;
  DWORD arg5 ;
  DWORD *arg6 = (DWORD *) 0 ;
  LONG *argp1 ;
  DWORD *argp3 ;
  DWORD *argp5 ;
  LONG result;
  LONG *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  arg2 = *(void **)&_swig_go_1; 
  
  argp3 = (DWORD *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg3 = (DWORD)*argp3;
  
  arg4 = *(void **)&_swig_go_3; 
  
  argp5 = (DWORD *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg5 = (DWORD)*argp5;
  
  arg6 = *(DWORD **)&_swig_go_5; 
  
  result = NET_DVR_SendWithRecvRemoteConfig(SWIG_STD_MOVE(arg1),arg2,SWIG_STD_MOVE(arg3),arg4,SWIG_STD_MOVE(arg5),arg6);
  *(LONG **)&_swig_go_result = new LONG(result); 
  return _swig_go_result;
}


DWORD *_wrap_NET_DVR_GetLastError_HKIPcamera_f77b1fde7b65d287() {
  DWORD result;
  DWORD *_swig_go_result;
  
  
  result = NET_DVR_GetLastError();
  *(DWORD **)&_swig_go_result = new DWORD(result); 
  return _swig_go_result;
}


LONG *_wrap_login_v30_HKIPcamera_f77b1fde7b65d287(_gostring_ _swig_go_0, WORD *_swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, tagNET_DVR_DEVICEINFO_V30 *_swig_go_4) {
  char *arg1 = (char *) 0 ;
  WORD arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  LPNET_DVR_DEVICEINFO_V30 arg5 = (LPNET_DVR_DEVICEINFO_V30) 0 ;
  WORD *argp2 ;
  LONG result;
  LONG *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  argp2 = (WORD *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null WORD");
  }
  arg2 = (WORD)*argp2;
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  arg5 = *(LPNET_DVR_DEVICEINFO_V30 *)&_swig_go_4; 
  
  result = NET_DVR_Login_V30((char const *)arg1,SWIG_STD_MOVE(arg2),(char const *)arg3,(char const *)arg4,arg5);
  *(LONG **)&_swig_go_result = new LONG(result); 
  free(arg1); 
  free(arg3); 
  free(arg4); 
  return _swig_go_result;
}


void _wrap_DecodeFrameCallback_HKIPcamera_f77b1fde7b65d287(FRAME_INFO *_swig_go_0, _gostring_ _swig_go_1) {
  FRAME_INFO *arg1 = (FRAME_INFO *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  
  arg1 = *(FRAME_INFO **)&_swig_go_0; 
  
  arg2 = (BYTE *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  DecodeFrameCallback(arg1,arg2);
  
  free(arg2); 
}


void* _wrap_NET_DVR_SetExceptionCallBack_V30_cb_HKIPcamera_f77b1fde7b65d287() {
  void (*result)(DWORD,LONG,void (*)(DWORD,LONG,LONG,void *),void *) = 0 ;
  void* _swig_go_result;
  
  
  result = (void (*)(DWORD,LONG,void (*)(DWORD,LONG,LONG,void *),void *))((void (*)(DWORD dwType,LONG lUserID,void (*fExceptionCallBack)(DWORD,LONG,LONG,void *),void *pUser))(NET_DVR_SetExceptionCallBack_V30));
  *(void (**)(DWORD,LONG,void (*)(DWORD,LONG,LONG,void *),void *))&_swig_go_result = (void (*)(DWORD,LONG,void (*)(DWORD,LONG,LONG,void *),void *))result; 
  return _swig_go_result;
}


void _wrap_NET_DVR_SetExceptionCallBack_V30_HKIPcamera_f77b1fde7b65d287(DWORD *_swig_go_0, LONG *_swig_go_1, void* _swig_go_2, void *_swig_go_3) {
  DWORD arg1 ;
  LONG arg2 ;
  void (*arg3)(DWORD,LONG,LONG,void *) = (void (*)(DWORD,LONG,LONG,void *)) 0 ;
  void *arg4 = (void *) 0 ;
  DWORD *argp1 ;
  LONG *argp2 ;
  
  
  argp1 = (DWORD *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg1 = (DWORD)*argp1;
  
  
  argp2 = (LONG *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg2 = (LONG)*argp2;
  
  arg3 = *(void (**)(DWORD,LONG,LONG,void *))&_swig_go_2; 
  arg4 = *(void **)&_swig_go_3; 
  
  NET_DVR_SetExceptionCallBack_V30(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3,arg4);
  
}


BOOL *_wrap_ptz_control_HKIPcamera_f77b1fde7b65d287(LONG *_swig_go_0, LONG *_swig_go_1, DWORD *_swig_go_2, DWORD *_swig_go_3, DWORD *_swig_go_4) {
  LONG arg1 ;
  LONG arg2 ;
  DWORD arg3 ;
  DWORD arg4 ;
  DWORD arg5 ;
  LONG *argp1 ;
  LONG *argp2 ;
  DWORD *argp3 ;
  DWORD *argp4 ;
  DWORD *argp5 ;
  BOOL result;
  BOOL *_swig_go_result;
  
  
  argp1 = (LONG *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg1 = (LONG)*argp1;
  
  
  argp2 = (LONG *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null LONG");
  }
  arg2 = (LONG)*argp2;
  
  
  argp3 = (DWORD *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg3 = (DWORD)*argp3;
  
  
  argp4 = (DWORD *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg4 = (DWORD)*argp4;
  
  
  argp5 = (DWORD *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null DWORD");
  }
  arg5 = (DWORD)*argp5;
  
  
  result = NET_DVR_PTZControl_Other(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5));
  *(BOOL **)&_swig_go_result = new BOOL(result); 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

